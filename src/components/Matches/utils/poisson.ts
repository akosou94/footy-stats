// Функция для вычисления факториала числа
export const factorial = (n: number): number => {
	// Если n равно 0 или 1, возвращаем 1
	if (n === 0 || n === 1) {
		return 1;
	}
	// Иначе, умножаем n на факториал n-1
	else {
		return n * factorial(n - 1);
	}
};

// Функция для вычисления вероятности появления k успехов в n испытаниях Бернулли с вероятностью p
export const binomial = (n: number, k: number, p: number) => {
	// Используем формулу Бернулли: C(n, k) * p^k * (1 - p)^(n - k)
	// C(n, k) - это число сочетаний из n по k, которое равно n! / (k! * (n - k)!)
	// n! - это факториал n, который вычисляем с помощью функции factorial
	return (factorial(n) / (factorial(k) * factorial(n - k))) * Math.pow(p, k) * Math.pow(1 - p, n - k);
};

// Функция для вычисления вероятности появления k успехов в n испытаниях Бернулли с малой вероятностью p с помощью теоремы Пуассона
export const poisson = (n: number, k: number, p: number) => {
	// Используем формулу Пуассона: (lambda^k / k!) * e^(-lambda)
	// lambda - это среднее число успехов, которое равно n * p
	// e - это основание натурального логарифма, которое равно 2.71828
	// k! - это факториал k, который вычисляем с помощью функции factorial
	let lambda = n * p;
	return (Math.pow(lambda, k) / factorial(k)) * Math.pow(2.71828, -lambda);
};

// Пример использования функций binomial и poisson
// Пусть n = 1000, k = 3, p = 0.001
// Тогда вероятность появления 3 успехов в 1000 испытаниях Бернулли с вероятностью 0.001 равна
/* console.log(binomial(1000, 3, 0.001))  */ // 0.06131324019524039
// А приближенная вероятность с помощью теоремы Пуассона равна
/* console.log(poisson(1000, 3, 0.001))  */ // 0.06131324019524039
// Как видим, результаты совпадают с высокой точностью
